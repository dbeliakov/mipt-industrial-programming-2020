doctype html
html(lang="en")
    head
        title Промышленное программирование
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Промышленное программирование
            p Лекция 5. Чистый код
        section.slide#cover
            h2 Лекция 5. Чистый код
            p Промышленное программирование @ МФТИ, 2020-2021
            img.cover(src="../../../common/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }

        section.slide
            h2 "Герб" типичного программиста
            img(src="img/bad_code.jpg", height="70%")

        section.slide
            h2 Хороший код
            p(style="font-size: 25pt;") Что такое "хороший" код?
            p(style="font-size: 25pt;") Какими свойствами должен обладать "хороший" код?

        section.slide
            h2 Хороший код
            ul
                li Компилируется и запускается
                li Решает свою задачу
                li Решает ее оптимально
                li "Make It Work, Make It Right, Make It Fast" Kent Beck, часть Unix Way

        section.slide
            h2 Хороший код
            ul
                li Программа - для машины, код - для людей
                li Современные проекты разрабатываются большими (порой интернациональными) командами
                li Это предъявляет существенные требования к качеству кода
                li KISS - Keep It Simple, Stupid!. Простота и ясность - универсальное правило хорошего кода.
                li Однако читабельность не должна быть результатом упрощения

        section.slide
            h2 Хороший код
            div Хороший код должен:
            ul
                li Обеспечивать лёгкое покрытие кода тестами и отладку
                li Облегчать восприятие кода и использование программы
                li Гарантировать лёгкость сопровождения
                li Упрощать процесс внесения дальнейших изменений
                li Обеспечивать устойчивость программы
                li Обеспечивать возможность поддержки проекта несколькими разработчиками или целыми сообществами

        section.slide
            h2 Написание хорошего кода
            ul
                li Есть множество путей решения задачи. Перед написанием кода, нужно выбрать лучший для #[b этой конкретной] задачи
                li При решении нужно оценить максимально возможное количество кейсов - и решать исходя из них
                li Полезно исходить от конечного результата, который хочется получить
                li Предусмотреть, как можно протестировать результат решения задачи. Желательно, автоматически и детерминировано

        section.slide
            h2 Написание хорошего кода
            ul
                li Какие кейсы могут быть у задачи?
                li Все ли я учел?
                li Что может пойти не так?
                li Что можно объединить?
                li Есть ли похожий функционал?
                li Что тут лишнее?
                li Как сделать проще?
                li Как сделать читабельнее?
                li Как сделать понятнее?
        
        section.slide
            h2 Чистый код
            ul
                li Простой, выразительный, направленный на конкретную задачу
                li Комментарии в коде не должны пояснять работу кода. Код без комментариев должен быть легко читаем и понятен
                li Мало завязан на других сущностях. Чем обособленнее код, тем проще его модифицировать
                li Любая сущность должна отвечать за один функционал и выполнять его хорошо - Single Responsibility
                li Код должен читаться сверху вниз - как книга

        section.slide
            h2 Наименование сущностей
            div Когда придумываешь, как назвать переменную
            img(src="img/name.jpg", height="70%")
        
        section.slide
            h2 Наименования сущностей
            ul
                li Имя должно быть лаконичным, но при этом отвечать, почему она существует, что делает и для чего используется
                li Сущность не должна иметь название непонятное или не соответствующее функционалу
                li Сущность, которая имеет в названии "And", "With" — нарушает Single Responsibility
                li Недопустимы "магические числа" - нетривиальные константы стоит выносить и давать им осознанные имена
        
        section.slide
            h2 Наименование сущностей
            ul
                li Названия методов должны содержать глагол, который описывает, что этот метод делает и ключевое слово с которым работает данный метод
                li Нужно избегать одинаковых наименований для двух разных целей
                li Две сущности с похожими названиями можно либо объединить, либо переименовать
                li Длинное и понятное имя лучше, чем короткое, но непонятное

        section.slide
            h2 Функции
            ul
                li Функции должны быть короткими и компактными
                li Приблизительный максимум 20 строк и 150 символов в одной строке, если не влезает, то нужно разделять
                li Функция должна выполнять только одну операцию
                li Если входных аргументов больше трех, то стоит задуматься каким образом лучше от них избавиться, например, создать класс для этих аргументов
                li Функция в которую передается аргумент-флаг, от которого зависит работа функции говорит о том, что функция выполняет более одной операции

        section.slide
            h2 Комментарии
            ul
                li Не комментируй плохой код — перепиши его. Не стоит объяснять, что происходит в плохом коде, лучше сделать его явным и понятным
                li Комментарии можно использовать для передачи какой-то информации, предупреждения о последствиях, но не для объяснения
                li Используй TODO и FIXME в тех случаях, когда нужно пометить, что код нуждается в доработке, но сейчас нет ресурсов на это
                li Документируй код, который является сложным, но чистым
                li Не оставляй старый закомментированный код

        section.slide
            h2 Чистый код
            ul
                li Нужно стараться прятать все детали реализации, которые не нужны снаружи. Закоммиченная публичная сущность - контракт
                li Всегда нужно помнить, какие ошибки могут случиться с вызываемым кодом. Необработанный NullPointerException стол многим компания очень больших денег
                li Важно соблюдать идеологию той технологии, которая используется 


        div(class="progress")
        script(src="../../../common/shower/shower.min.js")