doctype html
html(lang="en")
    head
        title Промышленное программирование
        meta(charset="utf-8")
        meta(http-equiv="x-ua-compatible", content="ie=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="../../../common/shower/themes/ribbon/styles/screen-16x10.css")
        style(type="text/css").
            .caption {
                color: #FFF;
            }
    body.shower.list
        header.caption
            h1 Промышленное программирование
            p Лекция 8. Continuous delivery (CD)
        section.slide#cover
            h2 Лекция 8. Continuous delivery (CD)
            p Промышленное программирование @ МФТИ, 2020-2021
            img.cover(src="../../../common/cover.jpg", alt="")
            style(type="text/css").
                #cover h2 {
                    margin: 30px 0 0;
                    color: #FFF;
                    text-align: center;
                    font-size: 70px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p {
                    margin: 10px 0 0;
                    text-align: center;
                    color: #FFF;
                    font-style: italic;
                    font-size: 20px;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }
                #cover p a {
                    color: #FFF;
                    text-shadow: black 1px 1px 0, black -1px -1px 0, 
                                 black -1px 1px 0, black 1px -1px 0;
                }

        section.slide
            h2 Continuous delivery
            ul
                li Непрерывная поставка (Continuous Delivery) — это подход к разработке программного обеспечения, при котором все изменения, включая новые функции, изменения конфигурации, исправления ошибок и эксперименты, поставляются пользователям максимально быстро и безопасно
                li Любой, кто обладает достаточными привилегиями для развертывания нового релиза может выполнить развертывание в любой момент, и это можно сделать в несколько кликов
                li Программист, избавившись практически от всей ручной работы, трудится продуктивнее

        section.slide
            h2 Continuous delivery
            ol(style="font-size: 14pt;")
                li Разработчик отправляет свои изменения в систему контроля версии
                li На сервере сборки начинается процесс сборки поступивших изменений
                li Запускаются юнит-тесты
                li Собранный пакет после успешной интеграции выкладывается на тестовый сервер
                li Заинтересованные лица получают уведомления о выкладке новой версии ПО на тестовую площадку. Начинается вторая фаза тестирования, запускаются интеграционные, ручные, приемочные, UI тесты и тд
                li После успешного прохождения предыдущих шагов мы имеем готовый к публикации пакет новой версии ПО

        section.slide
            h2 Continuous delivery
            ul
                li Очень важно отметить, что на протяжении всего процесса непрерывной доставки команда постоянно получает обратную связь
                li Непрерывная поставка позволяет нам снизить риски релизов, делая развертывание программного обеспечения безболезненным, безопасным событием, которое может быть выполнено в любое время
                li Автоматизируя большинство операций, таких как развертывание, настройки окружения, тестирование, мы сокращаем время поставки новой функциональности

        section.slide
            h2 Continuous deployment
            ul(style="font-size: 15pt;")
                li Непрерывное развертывание (deployment) располагается «на уровень выше» непрерывной доставки
                li Все изменения, вносимые в исходный код, автоматически развертываются в продакшен, без явной отмашки от разработчика
                li Как правило, задача разработчика сводится к проверке запроса на включение (pull request) от коллеги и к информированию команды о результатах всех важных событий
                li Непрерывное развертывание требует, чтобы в команде существовала отлаженная культура мониторинга, все умели держать руку на пульсе и быстро восстанавливать систему

        section.slide
            h2 Continuous deployment
            ul
                li Иногда возникает путаница, что означает аббревиатура «CD» в паре «CI/CD». Четкого ответа на этот вопрос нет, но в большинстве случаев эта пара понимается как «непрерывная интеграция и непрерывная доставка»
                li Это логично, если учесть, что непрерывное развертывание – частный случай непрерывной доставки, применимый не в каждой системе

        section.slide
            h2 Docker
            ul(style="font-size: 16pt;")
                li Docker – open–source движок, автоматизирующий развертывание приложений в легковесные, переносимые, самодостаточные контейнеры, которые могут без изменений переноситься между серверами
                li Он крайне легок в управлении, расширении, миграции и подходит для огромного спектра задач начиная от разработки приложений и сборки пакетов и заканчивая тестами-пятиминутками
                li Тот же самый контейнер, который разработчик создает и тестирует на ноутбуке, может быть легко перенесен на продакшн-сервера в облако и так же легко смигрирован в другой регион при необходимости

        section.slide
            h2 Docker
            ul
                li Docker — средство изоляции процесса(задачи), а это значит относиться к докеру как к виртуалке нельзя
                li Но он имеет многие похожие фишки, как и у виртуализации: независимость (контейнер может быть перемещен на любую ОС с docker-службой на борту и контейнер будет работать) и самодостаточность (контейнер будет выполнять свои функции в любом месте, где бы его не запустили)

        section.slide
            h2 Docker
            ul
                li Внутри контейнера находится минимально необходимый набор софта, необходимый для работы вашего процесса. Это уже не полноценная ОС, которую надо мониторить, следить за остатком места, ...
                li Контейнер это инструмент обработки данных, но не инструмент их хранения. Данные не должны сохраняться внутри контейнера

        section.slide
            h2 Docker
            ul(style="font-size: 16pt;")
                li Контейнер живет, пока живет процесс, вокруг которого рождается контейнер
                li Внутри контейнера этот процесс имеет pid=1
                li Рядом с процессом с pid=1 можно порождать сколько угодно других процессов, но убив (рестартовав) именно процесс с pid=1, контейнер выходит
                li Данные, создаваемые внутри контейнера остаются в контейнере и нигде более не сохраняются. Удалив контейнер — потеряете все ваши изменения. Поэтому данные в контейнерах не хранят, а выносят наружу, на хостовую ОС

        section.slide
            h2 Docker
            ul
                li Docker – клиент-серверное приложение. Клиенты разговаривают с сервером (демоном), который непосредственно делает всю работу
                li Для управления Docker можно использовать утилиту командной строки docker и RESTful API
                li Можно запускать клиент и сервер на одном хосте или удаленно подключаться к Docker-серверу

        section.slide
            h2 Образы Docker
            ul
                li Свои контейнеры пользователь запускает из образов, которые являются частью процесса построения контейнера
            img(height="50%", src="img/docker.png")

        section.slide
            h2 Docker registry
            ul
                li Docker хранит созданные вами образы в реестрах
                li Существует два типа реестров: публичные и приватные. Официальный реестр называется Docker Hub
                li Создав в нем аккаунт, можно сохранять свои образы в нем и делиться ими с другими пользователями

        section.slide
            h2 Контейнеры Docker
            ul
                li Контейнер - аналог процесса, только представляет собой приложение в совокупности. Контейнеры запускаются из образов
                li Когда Docker запускает контейнер, слой для записи пуст. При изменениях они записываются в этот слой. Например при изменении файла он копируется в слой, доступный для записи (copy on write)

        section.slide
            h2 Dockerfile
            ul
                li Описание шагов по построению образа
                li Каждый шаг - новый слой
                li Сборка образа - `docker build -t [NAME]:[TAG] .` (в директории с Dockerfile)

        section.slide
            h2 Docker Compose
            ul
                li Docker Compose — это инструментальное средство, входящее в состав Docker. Оно предназначено для решения задач, связанных с развёртыванием проектов
                li На практике реальные проекты состоят из большого количества связанных друг с другом контейнеров
                li Технология Docker Compose, если описывать её упрощённо, позволяет, с помощью одной команды, запускать множество сервисов

        div(class="progress")
        script(src="../../../common/shower/shower.min.js")